// ÊñáÊú¨Â§ÑÁêÜÂ∑•ÂÖ∑Á±ª
class TextProcessor {
    constructor() {
        this.questions = [];
        this.currentQuestion = null;
        this.answers = [];
    }

    // Â§ÑÁêÜOCRÊñáÊú¨
    processOCRText(text) {
        // Ê∏ÖÁêÜÊñáÊú¨
        text = this.cleanText(text);
        
        // ÊèêÂèñÈóÆÈ¢ò
        const questions = this.extractQuestions(text);
        if (questions.length > 0) {
            this.questions = questions;
            this.currentQuestion = questions[0];
        }
        
        // ÊèêÂèñÁ≠îÊ°à
        const answers = this.extractAnswers(text);
        if (answers.length > 0) {
            this.answers = answers;
        }
        
        return {
            questions: this.questions,
            currentQuestion: this.currentQuestion,
            answers: this.answers
        };
    }

    // Ê∏ÖÁêÜÊñáÊú¨
    cleanText(text) {
        return text
            .replace(/\s+/g, ' ')  // ÂêàÂπ∂Â§ö‰∏™Á©∫Ê†º
            .replace(/[^\S\r\n]+/g, ' ')  // ÂêàÂπ∂Â§ö‰∏™Á©∫ÁôΩÂ≠óÁ¨¶
            .trim();
    }

    // ÊèêÂèñÈóÆÈ¢ò
    extractQuestions(text) {
        const questions = [];
        const questionPatterns = [
            /(\d+\.\s*[^„ÄÇÔºü]+[„ÄÇÔºü])/g,  // ÂåπÈÖçÊï∞Â≠óÁºñÂè∑ÁöÑÈóÆÈ¢ò
            /([^„ÄÇÔºü]+[„ÄÇÔºü])/g  // ÂåπÈÖç‰ªª‰Ωï‰ª•Âè•Âè∑ÊàñÈóÆÂè∑ÁªìÂ∞æÁöÑÂè•Â≠ê
        ];

        for (const pattern of questionPatterns) {
            const matches = text.match(pattern);
            if (matches) {
                questions.push(...matches.map(q => q.trim()));
            }
        }

        return [...new Set(questions)];  // ÂéªÈáç
    }

    // ÊèêÂèñÁ≠îÊ°à
    extractAnswers(text) {
        const answers = [];
        const answerPatterns = [
            /Á≠î[Ôºö:]\s*([^„ÄÇ]+[„ÄÇ])/g,  // ÂåπÈÖç"Á≠îÔºö"ÂºÄÂ§¥ÁöÑÁ≠îÊ°à
            /Á≠îÊ°à[Ôºö:]\s*([^„ÄÇ]+[„ÄÇ])/g  // ÂåπÈÖç"Á≠îÊ°àÔºö"ÂºÄÂ§¥ÁöÑÁ≠îÊ°à
        ];

        for (const pattern of answerPatterns) {
            const matches = text.match(pattern);
            if (matches) {
                answers.push(...matches.map(a => a.trim()));
            }
        }

        return [...new Set(answers)];  // ÂéªÈáç
    }

    // Ëé∑ÂèñÂΩìÂâçÈóÆÈ¢ò
    getCurrentQuestion() {
        return this.currentQuestion;
    }

    // Ëé∑ÂèñÊâÄÊúâÈóÆÈ¢ò
    getQuestions() {
        return this.questions;
    }

    // Ëé∑ÂèñÊâÄÊúâÁ≠îÊ°à
    getAnswers() {
        return this.answers;
    }

    // ÈáçÁΩÆÁä∂ÊÄÅ
    reset() {
        this.questions = [];
        this.currentQuestion = null;
        this.answers = [];
    }
    
    // ÊñáÊú¨Áõ∏‰ººÂ∫¶ÊØîËæÉ
    static similarity(a, b) {
        if (!a || !b) return 0;
        
        const cleanText = (text) => {
            return text.toLowerCase()
                .replace(/[.,!?Ôºå„ÄÇÔºÅÔºü\s]+/g, ' ')
                .trim();
        };
        
        const cleanA = cleanText(a);
        const cleanB = cleanText(b);
        
        if (cleanA === cleanB) return 1;
        
        const levenshteinDistance = (str1, str2) => {
            const m = str1.length;
            const n = str2.length;
            const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));
            
            for (let i = 0; i <= m; i++) dp[i][0] = i;
            for (let j = 0; j <= n; j++) dp[0][j] = j;
            
            for (let i = 1; i <= m; i++) {
                for (let j = 1; j <= n; j++) {
                    if (str1[i - 1] === str2[j - 1]) {
                        dp[i][j] = dp[i - 1][j - 1];
                    } else {
                        dp[i][j] = Math.min(
                            dp[i - 1][j - 1] + 1,
                            dp[i - 1][j] + 1,
                            dp[i][j - 1] + 1
                        );
                    }
                }
            }
            
            return dp[m][n];
        };
        
        const maxLength = Math.max(cleanA.length, cleanB.length);
        if (maxLength === 0) return 1;
        
        const distance = levenshteinDistance(cleanA, cleanB);
        const editSimilarity = 1 - (distance / maxLength);
        
        const wordsA = cleanA.split(' ').filter(w => w.length > 0);
        const wordsB = cleanB.split(' ').filter(w => w.length > 0);
        
        const commonWords = wordsA.filter(word => wordsB.includes(word));
        const wordSimilarity = wordsA.length && wordsB.length ? 
            (2.0 * commonWords.length) / (wordsA.length + wordsB.length) : 0;
        
        const similarity = (editSimilarity * 0.7) + (wordSimilarity * 0.3);
        
        if (window.DEBUG) {
            console.log('üìä ÊñáÊú¨Áõ∏‰ººÂ∫¶ËØ¶ÊÉÖ:', {
                text1: cleanA,
                text2: cleanB,
                editDistance: distance,
                editSimilarity: editSimilarity.toFixed(3),
                commonWords,
                wordSimilarity: wordSimilarity.toFixed(3),
                finalSimilarity: similarity.toFixed(3)
            });
        }
        
        return similarity;
    }
}

// ÂØºÂá∫Ê®°Âùó
export default TextProcessor; 